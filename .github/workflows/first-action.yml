# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      
      - name: Check working directory
        run: ls
        
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Check working directory after checkout@v3
        run: ls
        
      - name: Change working directory && Install Composer dependencies
        run: |
          cd src
          composer install
      
      - name: Check if Docker is installed
        run: docker --version
      
#       - name: Create Docker laravel volume
#         run: docker volume create laravel
        
#       - name: Create nginx container
#         run: docker run -d \
#           --name nginx_container \
#           -p 8080:80 \
#           -v $(pwd)/src:/var/www/html \
#           -v $(pwd)/nginx/default.conf:/etc/nginx/conf.d/default.conf \
#           --network laravel \
#           nginx:stable-alpine

#       - name: Create mysql container
#         run: docker run -d \
#           --name mysql_container \
#           -p 3307:3306 \
#           -v $(pwd)/mysql:/var/lib/mysql \
#           -e MYSQL_DATABASE=laravel \
#           -e MYSQL_USER=user \
#           -e MYSQL_PASSWORD=password \
#           -e MYSQL_ROOT_PASSWORD=password \
#           --network laravel \
#           mysql:8
        
      - name: Generate app key
        run: |
          cd src
          ls -la | grep "env"
          php artisan key:generate --env=.env.example
        
      - name: Build and create the php image and container
        run: |
          docker build -t php-app .
          docker run -d \
            --name php_container \
            -v $(pwd)/src:/var/www/html \
            -p 9000:9000 \
            php-app
      
#       - name: Create the composer container
#         run: docker run -d \
#           --name composer_container \
#           -v $(pwd)/src:/var/www/html \
#           -w /var/www/html \
#           --network laravel \
#           composer:latest

      - name: Test application
        run: docker exec php_container php /var/www/html/artisan test
